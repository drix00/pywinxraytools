#!/usr/bin/env python
""" """

# Script information for the file.
__author__ = "Hendrix Demers (hendrix.demers@mail.mcgill.ca)"
__version__ = ""
__date__ = ""
__copyright__ = "Copyright (c) 2007 Hendrix Demers"
__license__ = ""

# Subversion informations for the file.
__svnRevision__ = "$Revision: 2364 $"
__svnDate__ = "$Date: 2011-05-30 07:15:15 -0400 (Mon, 30 May 2011) $"
__svnId__ = "$Id: GeneralResults.py 2364 2011-05-30 11:15:15Z hdemers $"

# Standard library modules.
import os.path

# Third party modules.

# Local modules.

# Globals and constants variables.

def computeEfficiency(value, error, time_s):
    """
    Compute efficiency from PENEPMA user's guide.

    Reference: eq. (2) in Llovet and Salvat (2006) [llovet2006].

    \begin{eqnarray}
        \epsilon_{Q} &=& \left(\frac{\overline{Q}}{\sigma_{Q}}\right)^{2} \frac{1}{t}
    \end{eqnarray}
    where $\overline{Q}$ simulated average value of $Q$,
    $\sigma_{Q}$ is the statistical uncertainties and $t$ is the computing time.

    """
    ratio = value / error

    efficiency = ratio * ratio / time_s

    return efficiency

class GeneralResults(object):
    """
    Read the results file "GenResult.txt" generated by winxray program.

    Note: Efficiency in the file is for the BSE yield and is not calculated correctly.

    """
    def __init__(self, path=None):
        """
        Constructor.

         path - folder where the file could be found.

        """
        self.path = path

        self.filename = "GenResult.txt"

        if self.path:
            if os.path.exists(self.path):
                self.readFile(os.path.join(self.path, self.filename))
            else:
                raise ValueError("Path does not exists: " + path)

    def readFile(self, filename):
        """
        Read all lines of the file and extract data.

        """
        with open(filename, 'r') as fp:
            lines = fp.readlines()

        self.extractData(lines)

    def extractData(self, lines):
        # pylint: disable-msg=W0201

        # Skip 1 header line.
        for line in lines[1:]:
            if "Version:" in line:
                value = line.split(':')[1].strip()

                self.versionStr = value
                self.version = self.computeVersion(value)

            if "Temps de Calcul (sec):" in line:
                value = line.split(':')[1].strip()

                self.time_s = float(value)

            # TODO: Temps de Calcul : 0:2:12:719

#            if "Efficiency:" in line:
#                value = line.split(':')[1].strip()
#
#                self.efficiency = float(value)

            # TODO: Simulation parameter
            # TODO: Incident energy (eV):                                 2500
            # TODO: Diameter (nm):                                                10
            # TODO: Init position X (nm):                                 0
            # TODO: Init position Y (nm):                                 0

            if "Number of electron:" in line:
                value = line.split(':')[1].strip()

                self.numberElectron = int(value)

            # TODO: Incident angle (deg):                                 0
            # TODO: Incident phi angle    (deg):                        0

            if "Mean density (g/cm^3):" in line:
                value = line.split(':')[1].strip()

                self.meanDensity_g_cm3 = float(value)

            # TODO: Mean Z:                                                             28.565
            # TODO: Mean MA:                                                            61.438

            # TODO: Specimen property
            # TODO: Number of element:                                        2

            # TODO: Element Mass fraction             Atomic fraction
            #29            0.565                             0.5455
            #28            0.435                             0.4546

    def computeVersion(self, versionStr):
        values = versionStr.split('.')

        major = int(values[0])
        minor = int(values[1])
        revision = int(values[2])
        build = int(values[3])

        return (major, minor, revision, build)

    def getMeanDensity_g_cm3(self):
        return self.meanDensity_g_cm3
