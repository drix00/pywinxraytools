#!/usr/bin/env python
""" """

# Script information for the file.
__author__ = "Hendrix Demers (hendrix.demers@mail.mcgill.ca)"
__version__ = ""
__date__ = ""
__copyright__ = "Copyright (c) 2007 Hendrix Demers"
__license__ = ""

# Subversion informations for the file.
__svnRevision__ = "$Revision: 2364 $"
__svnDate__ = "$Date: 2011-05-30 07:15:15 -0400 (Mon, 30 May 2011) $"
__svnId__ = "$Id: CharacteristicIntensity.py 2364 2011-05-30 11:15:15Z hdemers $"

# Standard library modules.
import os.path

# Third party modules.

# Local modules.

# Globals and constants variables.
GENERATED = 'generated'
EMITTED = 'emitted'
DETECTED = 'detected'
FILM = 'film'

MAC_cm2_g = "MAC (cm2/g)"

class CharacteristicIntensity(object):
    """
    Read the results file "XCharIntensity_Reg1.txt" generated by winxray program.

    """
    def __init__(self, path=None):
        """
        Constructor.

         path - folder where the file could be found.

        """
        self.path = path
        self.filename = "XCharIntensity_Reg1.txt"

        if self.path:
            if os.path.exists(self.path):
                self.readFile(os.path.join(self.path, self.filename))
            else:
                raise ValueError("Path does not exists: " + path)

    def extractData(self, lines):
        self.intensities = {}

        atomicNumbers = {}

        self.lines = {}

        # Skip 1 header line.
        for line in lines[1:]:
            values = line.split("\t")

            if len(values) > 1:
                atomicNumber = int(values[1])

                if not atomicNumber in self.intensities:
                    self.intensities[atomicNumber] = {}

                if not atomicNumber in atomicNumbers:
                    atomicNumbers[atomicNumber] = []

                if not atomicNumber in self.lines:
                    self.lines[atomicNumber] = []

                atomicNumbers[atomicNumber].append(values[0])

                self.intensities[atomicNumber][values[0]] = {}
                self.intensities[atomicNumber][values[0]]['energy'] = float(values[2])
                self.intensities[atomicNumber][values[0]]['generated'] = (float(values[3]), float(values[4]))
                self.intensities[atomicNumber][values[0]]['emitted'] = (float(values[5]), float(values[6]))
                self.intensities[atomicNumber][values[0]]['detected'] = (float(values[7]), float(values[8]))
                self.intensities[atomicNumber][values[0]]['film'] = float(values[9])
                # Old version of winxray does not have the mac value in this file
                # TODO: Use version of winxray?
                try:
                    self.intensities[atomicNumber][values[0]][MAC_cm2_g] = float(values[10])
                except ValueError:
                    pass

                self.lines[atomicNumber].append(values[0])

    def getData(self, atomicNumber, xrayLine):
        data = {}

        data['generated'] = (0.0, 0.0)
        data['emitted'] = (0.0, 0.0)
        data['detected'] = (0.0, 0.0)
        data['film'] = 0.0

        # Add all line if the first part is in the line.
        if atomicNumber in self.intensities:
            for line in self.intensities[atomicNumber].keys():
                if xrayLine in line:
                    data['generated'] = (data['generated'][0] + self.intensities[atomicNumber][line]['generated'][0],
                                                             data['generated'][1] + self.intensities[atomicNumber][line]['generated'][1])
                    data['emitted'] = (data['emitted'][0] + self.intensities[atomicNumber][line]['emitted'][0],
                                                         data['emitted'][1] + self.intensities[atomicNumber][line]['emitted'][1])
                    data['detected'] = (data['detected'][0] + self.intensities[atomicNumber][line]['detected'][0],
                                                            data['detected'][1] + self.intensities[atomicNumber][line]['detected'][1])
                    data['film'] += self.intensities[atomicNumber][line]['film']
                try:
                    data[MAC_cm2_g] = self.intensities[atomicNumber][line][MAC_cm2_g]
                except KeyError:
                    pass

        return data

    def readFile(self, filename):
        """
        Read all lines of the file and extract data.

        """
        with open(filename, 'r') as fp:
            lines = fp.readlines()

        self.extractData(lines)

    def getAtomicNumbers(self):
        return self.intensities.keys()

    def getAtomicNumberLines(self):
        atomicNumberLines = []

        for atomicNumber in self.intensities.keys():
            for line in self.intensities[atomicNumber].keys():
                atomicNumberLines.append((atomicNumber, line))

        return atomicNumberLines

